name: tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      # 1. Análisis de Estilo y Calidad (Linting)
      #    Ejecuta golangci-lint en todo el proyecto.
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # La versión de la herramienta a utilizar. 'latest' es una buena opción.
          version: v1.59
          # Se ejecuta en todo el proyecto.
          args: ./...

      # 2. Escaneo de Seguridad de Código
      #    Busca vulnerabilidades comunes en el código Go.
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          # El argumento './...' escanea todos los subdirectorios.
          args: -quiet ./...

      # 3. Comprobación de Vulnerabilidades en Dependencias
      #    Usa la base de datos de vulnerabilidades de Go para revisar tus dependencias.
      - name: Run govulncheck
        uses: golang/govulncheck-action@v1

      # 4. Ejecución de Pruebas Unitarias (con detector de condiciones de carrera)
      #    Se ejecutan las pruebas para cada módulo de forma independiente.
      - name: Test toycalc-core module
        working-directory: ./toycalc-core
        run: go test -race -v ./...

      - name: Test toycalc-console module
        working-directory: ./toycalc-console
        run: go test -race -v ./...
